--LAB-1 12 Oct Stock Problem

-- Example 1: How to find the close price from one day 
-- compared to the close price of the next day.

--Classical SQL

SELECT O.TickerSymbol, O.TradeDate, O.ClosePrice, 
	O.ClosePrice - CA.ClosePrice AS Change
FROM dbo.StockHistory AS O 
OUTER APPLY (
--select top one to make sure that to get just one row for each outer row
	SELECT TOP(1) I.ClosePrice 
	FROM dbo.StockHistory AS I 
	WHERE I.TickerSymbol = O.TickerSymbol
--inner query filtering on the ticker symbol and the trade date of the outer query, 
--making sure that the inner query trade date is less than the outer query trade date
		AND I.TradeDate < O.TradeDate
	ORDER BY I.TradeDate) AS CA
ORDER BY O.TickerSymbol, O.TradeDate;

---
--Which Windows function can be used for this problem?
--LEAD()/LAG()  Functions
--LEAD() – peek forward a number of rows
--LAG() – look back a number of rows
--Have access to that row's data
--Based off of current row!

SELECT TickerSymbol, TradeDate, ClosePrice 
FROM dbo.StockHistory
ORDER BY TickerSymbol, TradeDate;

--using lead
SELECT TickerSymbol, TradeDate, ClosePrice
	,Lead(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS [Next Close Price]
	,Lead(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate)-ClosePrice AS [Lead Change]
FROM dbo.StockHistory
ORDER BY TickerSymbol, TradeDate;

-- en fazla artan gun ve en fazla azalan gun size odev olsun...

--Using Lag() Function
SELECT TickerSymbol, TradeDate, ClosePrice 
FROM dbo.StockHistory
ORDER BY TickerSymbol, TradeDate;

SELECT TickerSymbol, TradeDate, ClosePrice
	,Lag(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS [Prev Close Price]
	,ClosePrice - 
	 Lag(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS [Lag Change]
	--,Lead(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS [Next Close Price]
	--,Lead(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate)-ClosePrice AS [Lead Change]
FROM dbo.StockHistory
ORDER BY TickerSymbol, TradeDate;
---------------------------------------------------------
-- How to tune queries
-- TOOLS ==> Statistics IO, Execution Plans, Statistics Time
-- How compare the performance of two methods used to solve the stock market proble
-- Statistics
--SET STATISTICS IO and SET STATISTICS TIME
	--are two settings that can help you measure 
	--the absolute resources needed by a server during query execution. 
--SET STATISTICS IO 
	--displays statistics on the amount of disk activity generated by the query.
--------------------------------------------------------
SET STATISTICS IO ON -- make active
GO

SELECT O.TickerSymbol, O.TradeDate, O.ClosePrice, 
	O.ClosePrice - CA.ClosePrice AS Change
FROM dbo.StockHistory AS O 
OUTER APPLY (
--select top one to make sure that to get just one row for each outer row
	SELECT TOP(1) I.ClosePrice 
	FROM dbo.StockHistory AS I 
	WHERE I.TickerSymbol = O.TickerSymbol
--inner query filtering on the ticker symbol and the trade date of the outer query, 
--making sure that the inner query trade date is less than the outer query trade date
		AND I.TradeDate < O.TradeDate
	ORDER BY I.TradeDate) AS CA
ORDER BY O.TickerSymbol, O.TradeDate;
--------------------------------------------------------------------
SELECT TickerSymbol, TradeDate, ClosePrice,
	ClosePrice - 
	LAG(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS Dif
FROM dbo.StockHistory
ORDER BY TickerSymbol, TradeDate;
-------------------------------------------------------------------------

SET STATISTICS IO OFF;
GO
SET STATISTICS TIME  ON;
Go
-------------------------------------------------------------------
CREATE TABLE #Stock1(TickerSymbol VARCHAR(4), TradeDate DATE, ClosePrice MONEY, Change MONEY);
CREATE TABLE #Stock2(TickerSymbol VARCHAR(4), TradeDate DATE, ClosePrice MONEY, Change MONEY);

INSERT INTO #Stock1(TickerSymbol, TradeDate, ClosePrice, Change)
SELECT TickerSymbol, TradeDate, ClosePrice,
	ClosePrice - 
	LAG(ClosePrice) OVER(PARTITION BY TickerSymbol ORDER BY TradeDate) AS Change
FROM dbo.StockHistory;

--performance issues
INSERT INTO #Stock2(TickerSymbol, TradeDate, ClosePrice, Change)
SELECT O.TickerSymbol, O.TradeDate, O.ClosePrice, 
	O.ClosePrice - CA.ClosePrice AS Change
FROM dbo.StockHistory AS O 
OUTER APPLY (
	SELECT TOP(1) I.ClosePrice 
	FROM dbo.StockHistory AS I 
	WHERE I.TickerSymbol = O.TickerSymbol 
		AND I.TradeDate < O.TradeDate
	ORDER BY I.TradeDate) AS CA;
------------------------------------------------------------
--found customers who has placed more than one order on the same day.
use  [AdventureWorks2017]
go
select t1.[CustomerID],t1.[SalesOrderID],t1.[OrderDate],
       ROW_NUMBER() over (partition by t1.[OrderDate],t1.[CustomerID] 
	   order by t1.[SalesOrderID]) [row number]
from [Sales].[SalesOrderHeader] t1
order by 4 desc